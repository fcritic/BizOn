<?php

/**1.	Бинарный поиск
Имеется массив целых чисел. Априорно известно, что массив отсортирован в порядке возрастания
значений его элементов. Необходимо написать функцию search(array $data, int $number) : int которая вернет индекс элемента массива
с заданным значением или -1 в случае отсутствия данного значения в массиве.

ВНИМАНИЕ: задача на построение алгоритма, использование array_search и уже с ним не принимается.
Решение методом полного перебора так же не засчитывается. **/

function search(array $data, int $number): int {
    $left = 0;
    $right = count($data) - 1;

    /* Цикл while в данном контексте используется для эффективной итерации
     в рамках алгоритма бинарного поиска, а не для полного перебора всех элементов массива. */
    while ($left <= $right) {
        $middle = intdiv($left + $right, 2);

        if ($data[$middle] === $number) {
            return $middle;
        } elseif ($data[$middle] < $number) {
            $left = $middle + 1;
        } else {
            $right = $middle - 1;
        }
    }
    return -1;
}

/**2. Поиск выходных
Необходимо написать функцию weekend (string $begin, string $end) : int которая возвращает количество выходных дней
(суббота и воскресенье) в заданном диапазоне дат. Следует учесть, что диапазон может быть сколь угодно большим
(то есть решение перебором будет считаться некорректным). Даты задаются строками пригодными для распознавания функцией strtotime().
 * Пример weekend('06.06.2020', '06.06.2020') вернет 1. **/

function weekend(string $begin, string $end): int {

    // в Unix-временную метку
    $startDate = strtotime($begin);
    $endDate = strtotime($end);

    // $days = целое число, представляющее собой приблизительное количество дней между $startDate и $endDate
    $days = intval(round(($endDate - $startDate) / (60 * 60 * 24)));

    // $weekends = количество выходных дней за все полные недели в интервале
    $weekends = intdiv($days, 7) * 2;

    // обработка оставшихся дней, которые не составили полную неделю
    for ($i = 0; $i <= $days % 7; $i++) {
        $dayOfWeek = date('w', strtotime("+$i day", $startDate));
        // date('w', ...) возвращает нам значение — это числовой индекс дня недели, где 0 соответствует воскресенью, а 6 — субботе

        // если $dayOfWeek = 0 или 6, то прибавляем 1 к $weekends
        if ($dayOfWeek == 0 || $dayOfWeek == 6) {
            $weekends++;
        }
    }
    return $weekends;
}

/**3. RGB
Необходимо написать функцию rgb(int $r, int $g, int $b):int которая осуществляет упаковку цветовых составляющих переданных в диапазоне 0-255 в целое число.
1-байт(младший) - красный, 2-байт - зеленый, 3-й байт - синий.
 * Пример rgb(255,0,255) вернет 16711935 **/

function rgb(int $r, int $g, int $b): int {
    return ($b << 16) | ($g << 8) | $r;
}

/**4. Последовательность Фибоначчи
Необходимо написать функцию fiborow(int $limit) : string которая будет возвращать элементы последовательности
Фибоначчи ограниченной переданным на вход значением $limit в виде строки (разделитель - пробел).
 * Например: при входном значении 10 функция должна вернуть строку "0 1 1 2 3 5 8". **/

function fiborow(int $limit): string {
    $sequence = [];
    $a = 0;
    $b = 1;

    while ($a <= $limit) {
        $sequence[] = $a;
        $next = $a + $b;
        $a = $b;
        $b = $next;
    }
    return implode(' ', $sequence);
}